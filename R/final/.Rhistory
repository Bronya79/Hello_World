head(iris)
lm(Swpal.Length~Sepal.width)
lm(Sepal.Length~Sepal.width)
lm(Sepal.Length~Sepal.Width)
detach(iris)
lm(Sepal.Length~Sepal.Width, date = iris)
lm(Sepal.Length~Sepal.Width, date = iris)
lm(Sepal.Length~Sepal.Width, date = iris)
lm(Sepal.Length~Sepal.Width, data = iris)
c(1, 2) > c(2, 3)
c(1, 2) > 1
a = c(1,2,3)
b = a >2
print(b)
which(b)
a = c(1,2,4)
b = a >2
print(b)
which(b)
print(a[3])
# lm(y~x, date = dateset)
lmfit <- lm(Sepal.Length~Sepal.Width, data = iris)
# lm(y~x, date = dateset)
lm.fit <- lm(Sepal.Length~Sepal.Width, data = iris)
# Coefficient 系数
# Intercept 截距
summary(lm.fit)
attach(iris)
# 统计计算和可视化
plot(epal.Length，Sepal.Width)
# 统计计算和可视化
plot(Sepal.Width，Sepal.Length)
# lm(y~x, date = dateset)
lm.fit <- lm(Sepal.Length~Sepal.Width, data = iris)
# Coefficient 系数
# Intercept 截距
summary(lm.fit)
# 统计计算和可视化
plot(Sepal.Width，Sepal.Length)
# lm(y~x, date = dateset)
lm.fit <- lm(Sepal.Length~Sepal.Width, data = iris)
# Coefficient 系数
# Intercept 截距
summary(lm.fit)
# 统计计算和可视化
plot(Sepal.Width，Sepal.Length)
# 统计计算和可视化
plot(Sepal.Width,Sepal.Length)
# 统计计算和可视化
plot(iris$Sepal.Width,iris$Sepal.Length)
abline(lm.fit)
iris[iris$Species=='setosa']
ap1
ap1 <- iris[iris$Species=='setosa']
ap1 <- iris[iris$Species=='setosa',]
View(lm.fit)
View(ap1)
View(ap1)
ap1_1 <- iris[1,50]
View(lm.fit)
View(ap1)
ap1_1 <- iris[1:50,]
View(ap1)
View(ap1_1)
View(ap1)
View(ap1_1)
View(ap1)
lm.fit1 <- lm(Sepal.Length~Sepal.Width, data = ap1)
View(lm.fit1)
summary(lm.fit1)
plot(ap1$Sepal.Width,ap1$Sepal.Length)
t.test(iris$Sepal.Length,iris$Petal.Length)
Welch Two Sample t-test
data:  iris$Sepal.Length and iris$Petal.Length
t.test(iris$Sepal.Length,iris$Petal.Length)
#
aov.fit <- aov(Sepal.Length~Species,data = iris)
summary(aov.fit)
#
library(agricolae)
lsd <- LSD.test(aov.fit,"Species")
lsd$groups
install.packages("agricolae")
#
library(agricolae)
lsd <- LSD.test(aov.fit,"Species")
lsd$groups
install.packages("ggplot")
install.packages("ggplot")
install.packages("ggplot")
install.packages("ggplot")
writeLines('PATH="$E:\\rtools40\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("ggplot")
install.packages("ggplot")
install.packages("ggplot2")
library("ggplot2")
library(ggplot2)
ggplot(data = iris, aes(x=Sepal.Length)) + geom_histogram()
name(iris)
ggplot(data = iris, aes(x=Sepal.Length)) + geom_histogram()
ggplot(data = iris, aes(x=Sepal.Length))
ggplot(data = iris, aes(x=Sepal.Length,
y=Sepal.Width))
library(ggplot2)
name(iris)
ggplot(data = iris, aes(x=Sepal.Length,
y=Sepal.Width))
library(ggplot2)
names(iris)
ggplot(data = iris, aes(x=Sepal.Length,
y=Sepal.Width))+
geom_point()
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
names(iris)
ggplot(data = iris, aes(x=Sepal.Length,
y=Sepal.Width))+
geom_point()
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
library(dplyr)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("stats")
library(ggplot2)
install.packages("ggplot2")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
search()
library(igraph,warn.conflicts = F)
library(dplyr,warn.conflicts = F)
library(dplyr)
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
# Define UI for application that draws iris variables
ui <- fluidPage(
# Application title
titlePanel("IRIS data visulization"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("variable.x",
"选择绘图X变量:",
c("花萼长" = "Sepal.Length",
"花萼宽" = "Sepal.Width",
"花瓣长" = "Petal.Length",
"花瓣宽" = "Petal.Width"
)),
selectInput("variable.y",
"选择绘图Y变量:",
c("花萼长" = "Sepal.Length",
"花萼宽" = "Sepal.Width",
"花瓣长" = "Petal.Length",
"花瓣宽" = "Petal.Width"
))
),
# Show a plot
mainPanel(
plotOutput("irisPlot")
)
)
)
# Define server logic required to draw scatter
server <- function(input, output) {
output$irisPlot <- renderPlot({
# x.position <- which(name)
ggplot(iris,aes(x=UQ(rlang::sym(input$variable.x)),
y=UQ(rlang::sym(input$variable.y)),
color=Species))+geom_point()
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("E:/Project/R/final")
setwd("E:/Project/R/final")
source("E:/Project/R/final/app.R", encoding = 'ASCII')
